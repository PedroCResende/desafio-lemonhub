üçã Desafio LemonHub

Este reposit√≥rio cont√©m **duas aplica√ß√µes integradas**:
- **Backend (API)** ‚Äî Node.js  
- **Aplicativo Mobile** ‚Äî React Native + Expo

üöÄ Como Rodar o Projeto Completo

Siga os passos abaixo para configurar e executar tanto o backend quanto o aplicativo mobile.

‚úÖ Pr√©-requisitos

Certifique-se de ter as seguintes ferramentas instaladas em sua m√°quina:

‚Ä¢
Node.js (vers√£o 14 ou superior recomendada)

‚Ä¢
npm (gerenciador de pacotes do Node.js, geralmente vem com o Node.js)

‚Ä¢
Git (para clonar o reposit√≥rio)

‚Ä¢
Um emulador/simulador Android/iOS configurado. (Recomendo o uso do Android Studio)

Passo a Passo Detalhado

 üìÇ 1Ô∏è‚É£ Clonar o Reposit√≥rio

Primeiro, clone o reposit√≥rio para sua m√°quina local usando o Git:

Bash


git clone https://github.com/PedroCResende/desafio-lemonhub
cd desafio-lemonhub


‚öôÔ∏è 2Ô∏è‚É£ Configurar e Rodar o Backend (API)

O backend √© respons√°vel por fornecer os dados para o aplicativo mobile.

1.
Navegue at√© o diret√≥rio do backend:
cd .\LemonHub-BackEnd\

2.
Instale as depend√™ncias do backend:
npm install 
npm install jsonwebtoken
npm install bcryptjs

3.
Inicie o servidor do backend:
npm run dev

‚Ä¢
Modo de Desenvolvimento (recomendado, com Nodemon):





üì± 3Ô∏è‚É£ Configurar e Rodar o App Mobile (Recomendo o uso do VScode)

O aplicativo mobile se conecta ao backend para buscar e enviar dados.

1.
Abra uma nova janela do terminal (mantenha o terminal do backend aberto).

2.
Navegue at√© o diret√≥rio do aplicativo mobile:
cd .\LemonHub-Mobile\

3.
Instale as depend√™ncias do aplicativo mobile:
npm install (caso solicite, use npm audit fix para corrigir a instala√ß√£o)

4.
Ajuste a URL da API (MUITO IMPORTANTE!):

‚Ä¢
Localize o arquivo: LemonHub-Mobile/src/services/api.js

‚Ä¢
Edite a linha: baseURL: 'http://localhost:3000', 

‚Ä¢
Substitua localhost pelo seu IP local. Por exemplo, se o seu IP for 192.168.1.100:

‚Ä¢
Windows: Abra o Prompt de Comando e digite ipconfig. Procure por "Endere√ßo IPv4".

‚Ä¢
macOS/Linux: Abra o Terminal e digite ifconfig ou ip a. Procure pelo endere√ßo IP associado √† sua interface de rede (geralmente en0, eth0 ou wlan0).



5.
Inicie o aplicativo Expo no terminal dentro da pasta LemonHub-Mobile
npx expo start

‚Ä¢
Rodar em Emulador/Simulador (requer que voc√™ tenha um emulador Android Studio ou Xcode Simulator configurado e rodando).: Pressione a tecla correspondente ao seu emulador
(Tutorial de como rodar o Android Studio no fim deste arquivo) -**ESTA ETAPA PODE DEMORAR UM POUCO**-



Estrutura do Projeto

‚Ä¢
üì¶ LemonHub-BackEnd/
 ‚î£ üìú src/app.js           # Ponto de entrada da API
 ‚î£ üìÇ src/controllers/     # L√≥gica de neg√≥cio
 ‚î£ üìÇ src/database/        # Configura√ß√£o SQLite
 ‚î£ üìÇ src/middleware/      # Middlewares de autentica√ß√£o
 ‚îó üìÇ src/routes/          # Rotas da API

üì¶ LemonHub-Mobile/
 ‚î£ üìú App.js               # Componente principal
 ‚î£ üìÇ src/screens/         # Telas (Login, Lista de Pratos, etc.)
 ‚îó üìÇ src/services/api.js  # Configura√ß√£o da conex√£o com a API


üí° Dicas
Sempre inicie o backend primeiro, DEPOIS o app mobile.

Para testar em dispositivos reais, backend e celular precisam estar na mesma rede Wi-Fi.

Use Ctrl + C para parar o servidor ou o Expo.



üí°Como iniciar o emulador pelo Android Studio

-Clique em "More Actions"
-Virual Device Manager
-Clique no √≠cone de "Play" para iniciar o emulador"
-Aguarde at√© que esteja iniciado (pode demorar um pouco)

***************************************************************************************************************************

üçã Guia de Teste da API LemonHub com Postman

Este guia detalha como testar todas as funcionalidades da API LemonHub utilizando o Postman. Certifique-se de que o backend da API esteja rodando localmente na porta 3000 (http://localhost:3000).

üöÄ Configura√ß√£o Inicial no Postman

1.
Baixe e instale o Postman: Se voc√™ ainda n√£o tem, baixe-o em https://www.postman.com/downloads/.

2.
Inicie o Backend: Certifique-se de que o servidor do backend LemonHub esteja rodando. Navegue at√© a pasta LemonHub-BackEnd no seu terminal e execute:

üîë Autentica√ß√£o (Login)

As rotas de cria√ß√£o, atualiza√ß√£o e exclus√£o de pratos s√£o protegidas e exigem um token de autentica√ß√£o. Voc√™ precisar√° realizar o login primeiro para obter este token.

POST /auth/login

‚Ä¢
Descri√ß√£o: Realiza o login de um usu√°rio e retorna um token JWT.

‚Ä¢
M√©todo: POST

‚Ä¢
URL: http://localhost:3000/auth/login

‚Ä¢
Headers:

‚Ä¢
Content-Type: application/json



‚Ä¢
Body (raw - JSON):

‚Ä¢
Resposta Esperada (Status 200 OK):

üçî Rotas de Pratos (CRUD)

1. Listar Todos os Pratos

GET /pratos

‚Ä¢
Descri√ß√£o: Retorna uma lista de todos os pratos cadastrados.

‚Ä¢
M√©todo: GET

‚Ä¢
URL: http://localhost:3000/pratos

‚Ä¢
Headers: Nenhum necess√°rio.

‚Ä¢
Resposta Esperada (Status 200 OK):

‚Ä¢
Se n√£o houver pratos, retornar√° um array vazio: [].



2. Cadastrar Novo Prato

POST /pratos

‚Ä¢
Descri√ß√£o: Cadastra um novo prato no sistema.

‚Ä¢
M√©todo: POST

‚Ä¢
URL: http://localhost:3000/pratos

‚Ä¢
Headers:

‚Ä¢
Content-Type: application/json

‚Ä¢
Authorization: Bearer <SEU_TOKEN_JWT> (Substitua <SEU_TOKEN_JWT> pelo token obtido no login)



‚Ä¢
Body (raw - JSON):

‚Ä¢
Resposta Esperada (Status 201 Created):

‚Ä¢
Valida√ß√£o: Tente enviar sem nome ou com preco menor ou igual a zero para ver as mensagens de erro.



3. Consultar Prato por ID

GET /pratos/:id

‚Ä¢
Descri√ß√£o: Retorna os detalhes de um prato espec√≠fico pelo seu ID.

‚Ä¢
M√©todo: GET

‚Ä¢
URL: http://localhost:3000/pratos/1 (Substitua 1 pelo ID de um prato existente)

‚Ä¢
Headers: Nenhum necess√°rio.

‚Ä¢
Resposta Esperada (Status 200 OK):

‚Ä¢
Prato N√£o Encontrado (Status 404 Not Found):



4. Atualizar Prato

PUT /pratos/:id

‚Ä¢
Descri√ß√£o: Atualiza os dados de um prato existente pelo seu ID.

‚Ä¢
M√©todo: PUT

‚Ä¢
URL: http://localhost:3000/pratos/1 (Substitua 1 pelo ID do prato a ser atualizado)

‚Ä¢
Headers:

‚Ä¢
Content-Type: application/json

‚Ä¢
Authorization: Bearer <SEU_TOKEN_JWT>



‚Ä¢
Body (raw - JSON):

‚Ä¢
Resposta Esperada (Status 200 OK):

‚Ä¢
Prato N√£o Encontrado (Status 404 Not Found):



5. Remover Prato

DELETE /pratos/:id

‚Ä¢
Descri√ß√£o: Remove um prato do sistema pelo seu ID.

‚Ä¢
M√©todo: DELETE

‚Ä¢
URL: http://localhost:3000/pratos/1 (Substitua 1 pelo ID do prato a ser removido)

‚Ä¢
Headers:

‚Ä¢
Authorization: Bearer <SEU_TOKEN_JWT>



‚Ä¢
Resposta Esperada (Status 200 OK):

‚Ä¢
Prato N√£o Encontrado (Status 404 Not Found):



6. Buscar Pratos por Nome ou Categoria

GET /pratos/search

‚Ä¢
Descri√ß√£o: Busca pratos por nome ou categoria. Pode ser usado com um ou ambos os par√¢metros.

‚Ä¢
M√©todo: GET

‚Ä¢
URL:

‚Ä¢
Buscar por nome: http://localhost:3000/pratos/search?nome=pizza

‚Ä¢
Buscar por categoria: http://localhost:3000/pratos/search?categoria=sobremesa

‚Ä¢
Buscar por nome e categoria: http://localhost:3000/pratos/search?nome=bolo&categoria=sobremesa



‚Ä¢
Headers: Nenhum necess√°rio.

‚Ä¢
Resposta Esperada (Status 200 OK):

‚Ä¢
Se nenhum prato for encontrado, retornar√° um array vazio: [].






Feito  por PedroCResende üöÄ

